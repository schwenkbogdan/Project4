/*Задание к работе : Реализовать вычислительный процесс с использованием классов.
Самостоятельно решить задачи в соответствии с индивидуальным вариантом.
Методика выполнения работы :
1. Разработать алгоритм решения задачи по индивидуальному заданию.
2. Написать и отладить программу решения задачи.
3. Протестировать работу программы на различных исходных данных.
4. Подготовить ответы на вопросы :
Что понимается под ООП ?
Перечислите и охарактеризуйте основные принципы создания объектной модели
(абстрагирование инкапсуляция модульность, иерархия, типизация, параллелизм, сохраняемость).
Что понимают под интерфейсом, внутренней реализацией ?
Что понимается под экземпляром класса ? 
Перечислите и охарактеризуйте уровни доступа к членам класса.
В чем принципиальное отличие использования классов и структур ?
Представьте классификацию методов объекта.
Перечислите виды конструкторов.
Охарактеризуйте понятие «время жизни объекта».Каков порядок разрушения классов в программе ? 
Каким образом программист может наблюдать процесс разрушения / создания экземпляров класса ?
Где контролируется смысловая связь объекта ?
Что понимают под многофайловым проектом ? Опишите последовательность сборки проекта.
Каким образом шаблонизация методов классов повлияет на разбиение кода по файлам.
Что понимается под исключением ?
Приведите и охарактеризуйте основные параметры обработки исключений ?
Перечислите основные правила использования исключений в коде.
Приведите пример генерации и обработки динамической строки и данных строкового потока в исключении ?
Каким образом реализуют наследование классов ошибок ?
Что понимают под абстрактным классом ?
*/
/* Вариант 1
Реализовать класс для работы с комплексными числами.
Список требований, предъявляемых к реализации интерфейса класса:
1. Конструктор параметризованный (задать в конструкторе числитель и
знаменатель)  и  непараметризованный.  При  некорректном  вводе  выбросить
стандартное исключение.
2.  Разработать  арифметику  класса  A+B,  A-B,  A*B,  A/B.  В  случае
невозможности выполнения операций (с точки зрения математики) выбросить
стандартное исключение.

3. Создать методы класса, реализующие:

- возведение комплексных чисел в степень, формула Муавра;
-  извлечение корней из комплексных чисел, квадратное уравнение с
комплексными корнями.

5. Перегрузить операторы сравнения.

7. Возможно предусмотреть базовое меню с реализацией функций класса.

8.  Задать  логгер  к  классу,  фиксирующий  историю  вызова  различных
операций класса.*/
/*
Вариант 2
Написать  программу  реализующую  работу  с  дробями  (числитель  /
знаменатель).  Другие  форматы  задания  дроби  должны  рассматриваться  как
исключение. Для числителя и знаменателя должна поддерживаться инкапсуляция
(секция private).
Список требований, предъявляемых к реализации интерфейса класса:
1. Конструктор по умолчанию должен создавать дробь с числителем 0 и
знаменателем 1.
2. Параметризованный конструктор должен выполнять сокращение дроби
на значение Наибольшего общего делителя (алгоритм Евклида).
3. Знак дроби непосредственно относится к числителю.
4. Не  допускается  деление  на  ноль.  В  случае  если  такое  произошло
обработать исключение.
5. Класс  дроби  должен  поддерживать  корректные  арифметические  и
логические операции (перегрузки +, -, /, *, -1, степень, <, <=, >, >=, =).
6. Класс  должен  реализовывать  оператор  присваивания  (единственный
метод-модификатор в классе).
7. Задать логгер к классу, фиксирующий  историю вызова различных
операций класса.
*/
/*
Задание: Сформировать обработку исключений согласно варианту ЛР4.

1. Создать абстрактный класс IError – класс, определяющий интерфейс для 
хранения, описания и вывода ошибок. Поле – текст ошибки/код ошибки. 
Виртуальная функция print, которая по умолчанию печатает единственное поле.

2. Отнаследовать от IError как минимум два класса ошибок (не абстрактных). 
В обработках исключений вместо завершения программы возвращаться в START 
(для этого нужен event loop и(ли) state machine), если необходимо, и заносить 
информацию об ошибке в соответствующий типу ошибки класс.

3. Реализовать функцию print_error_list(std::vector err), которая будет 
выводить список всех ошибок, произошедших за время работы программы.
Использовать повышение приведения типа.
*/
#include <iostream>
#include"fraction.h"
#include"ComplexNumbers.h"
#include"DateTime.h"
#include <ctime>
using namespace std;
int main()
{
	Logger logger = Logger("log");
	
	DateTime CurrentDate;
	DateTime Alarm;	

	ComplexNumbers Z1;
	ComplexNumbers Z2;
	ComplexNumbers Zres;

	////cin >> Z1;
	//time_t now = time(0);
	//char* dt = ctime(&now);
	//cout << "The local date and time is: " << dt << endl;
	//tm* gmtm = gmtime(&now);
	//dt = asctime(gmtm);
	//cout << "The UTC date and time is:" << dt << endl;
	//cout << Z1;
	
	Z1.operator>>(cin);
	Z2.operator>>(cin);
	

	Zres = Z1.operator+(Z2);
	cout << "Z1 + Z2 = " << Zres;
	Zres = Z1.operator-(Z2);
	cout << "Z1 - Z2 = " << Zres;
	Zres = Z1.operator*(Z2);
	cout << "Z1 * Z2 = " << Zres;
	Zres = Z1.operator/(Z2);
	cout << "Z1 / Z2 = " << Zres;
	Zres.thrigonometryForm();
	cout << "thrigonometryForm";



	//Zres.operator<<(cout);
	//cin << first();	
	//cout << Z1;
	//cout << Z1.operator+(Z2);
	//cout >> res;
	return 0;
}


/*
* 1 Что понимается под ООП?
* 2 Перечислите и охарактеризуйте основные принципы создания объектной модели
(абстрагирование инкапсуляция модульность, иерархия, типизация, параллелизм,
сохраняемость).
3 Что понимают под интерфейсом, внутренней реализацией?

*/